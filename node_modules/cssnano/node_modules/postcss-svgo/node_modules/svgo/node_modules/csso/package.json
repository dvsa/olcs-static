{
  "name": "csso",
  "description": "CSSO — CSS optimizer",
  "version": "1.6.4",
  "homepage": "https://github.com/css/csso",
  "author": {
    "name": "Sergey Kryzhanovsky",
    "email": "skryzhanovsky@ya.ru",
    "url": "https://github.com/afelix"
  },
  "maintainers": [
    {
      "name": "Roman Dvornov",
      "email": "rdvornov@gmail.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/css/csso.git"
  },
  "bugs": {
    "url": "https://github.com/css/csso/issues"
  },
  "bin": {
    "csso": "./bin/csso"
  },
  "main": "./lib/index",
  "eslintConfig": {
    "env": {
      "node": true,
      "mocha": true,
      "es6": true
    },
    "rules": {
      "no-undef": 2,
      "no-unused-vars": [
        2,
        {
          "vars": "all",
          "args": "after-used"
        }
      ]
    }
  },
  "scripts": {
    "test": "jscs lib && eslint lib test && mocha --reporter dot",
    "hydrogen": "node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/csso --stat -o /dev/null",
    "coverage": "istanbul cover _mocha -- -R dot",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R dot && cat ./coverage/lcov.info | coveralls",
    "travis": "npm run test && npm run coveralls",
    "browserify": "browserify --standalone csso lib/index.js | uglifyjs --compress --mangle -o dist/csso-browser.js",
    "gh-pages": "git clone -b gh-pages https://github.com/css/csso.git .gh-pages && npm run browserify && cp dist/csso-browser.js .gh-pages/ && cd .gh-pages && git commit -am \"update\" && git push && cd .. && rm -rf .gh-pages",
    "prepublish": "npm run browserify"
  },
  "dependencies": {
    "clap": "^1.0.9",
    "source-map": "^0.5.3"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "coveralls": "^2.11.6",
    "eslint": "^2.2.0",
    "istanbul": "^0.4.2",
    "jscs": "~2.10.0",
    "mocha": "~2.4.2",
    "uglify-js": "^2.6.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "bin",
    "dist/csso-browser.js",
    "lib",
    "HISTORY.md",
    "LICENSE",
    "README.md"
  ],
  "readme": "[![NPM version](https://img.shields.io/npm/v/csso.svg)](https://www.npmjs.com/package/csso)\n[![Build Status](https://travis-ci.org/css/csso.svg?branch=master)](https://travis-ci.org/css/csso)\n[![Coverage Status](https://coveralls.io/repos/github/css/csso/badge.svg?branch=master)](https://coveralls.io/github/css/csso?branch=master)\n[![Dependency Status](https://img.shields.io/david/css/csso.svg)](https://david-dm.org/css/csso)\n[![devDependency Status](https://img.shields.io/david/dev/css/csso.svg)](https://david-dm.org/css/csso#info=devDependencies)\n[![Twitter](https://img.shields.io/badge/Twitter-@cssoptimizer-blue.svg)](https://twitter.com/cssoptimizer)\n\nCSSO (CSS Optimizer) is a CSS minimizer unlike others. In addition to usual minification techniques it can perform structural optimization of CSS files, resulting in smaller file size compared to other minifiers.\n\n## Install\n\n```\nnpm install -g csso\n```\n\n## Usage\n\n### Runners\n\n- Gulp: [gulp-csso](https://github.com/ben-eb/gulp-csso)\n- Grunt: [grunt-csso](https://github.com/t32k/grunt-csso)\n- Broccoli: [broccoli-csso](https://github.com/sindresorhus/broccoli-csso)\n\n### Command line\n\n```\ncsso [input] [output] [options]\n\nOptions:\n\n      --debug [level]       Output intermediate state of CSS during compression\n  -h, --help                Output usage information\n  -i, --input <filename>    Input file\n      --input-map <source>  Input source map. Possible values: none, auto (default) or <filename>\n  -m, --map <destination>   Generate source map. Possible values: none (default), inline, file or <filename>\n  -o, --output <filename>   Output file (result outputs to stdout if not set)\n      --restructure-off     Turns structure minimization off\n      --stat                Output statistics in stderr\n  -v, --version             Output version\n```\n\nSome examples:\n\n```\n> csso in.css out.css\n\n> csso in.css\n...output result in stdout...\n\n> echo '.test { color: #ff0000; }' | csso\n.test{color:red}\n\n> cat source1.css source2.css | csso | gzip -9 -c > production.css.gz\n\n> echo '.test { color: #ff0000 }' | csso --stat >/dev/null\nFile:       <stdin>\nOriginal:   25 bytes\nCompressed: 16 bytes (64.00%)\nSaving:     9 bytes (36.00%)\nTime:       12 ms\nMemory:     0.346 MB\n```\n\n### Source maps\n\nSource map doesn't generate by default. To generate map use `--map` CLI option, that can be:\n\n- `none` (default) – don't generate source map\n- `inline` – generate map add it into result content (via `/*# sourceMappingURL=application/json;base64,...base64 encoded map... */`)\n- `file` – generate map and write it into file with same name as output file, but with `.map` extension; in this case `--output` option is required\n- any other values treat as filename for generated source map\n\nExamples:\n\n```\n> csso my.css --map inline\n> csso my.css --map file --output my.min.css\n> csso my.css -o my.min.css -m maps/my.min.map\n```\n\nInput can has a source map. Use `--input-map` option to specify input source if needed. Possible values for option:\n\n- `auto` (auto) - attempt to fetch input source map by follow steps:\n  - try to fetch inline map from source\n  - try to fetch map filename from source and read its content\n  - (when `--input` is specified) check for file with same name as input but with `.map` extension exists and read its content\n- `none` - don't use input source map; actually it's using to disable `auto`-fetching\n- any other values as filename for input source map\n\n> NOTE: Input source map is using only if source map is generating.\n\n### API\n\n```js\nvar csso = require('csso');\n\nvar compressedCss = csso.minify('.test { color: #ff0000; }');\n\nconsole.log(compressedCss);\n// .test{color:red}\n\n\n// there are some options you can pass\nvar compressedWithOptions = csso.minify('.test { color: #ff0000; }', {\n    restructure: false,   // don't change css structure, i.e. don't merge declarations, rulesets etc\n    debug: true           // show additional debug information:\n                          // true or number from 1 to 3 (greater number - more details)\n});\n\n// you may do it step by step\nvar ast = csso.parse('.test { color: #ff0000; }');\nvar compressedAst = csso.compress(ast);\nvar compressedCss = csso.translate(compressedAst, true);\n\nconsole.log(compressedCss);\n// .test{color:red}\n```\n\nWorking with source maps:\n\n```js\nvar css = fs.readFileSync('path/to/my.css', 'utf8');\nvar result = csso.minify(css, {\n  filename: 'path/to/my.css', // will be added to source map as reference to file\n  sourceMap: true             // generate source map\n});\n\nconsole.log(result);\n// { css: '...minified...', map: SourceMapGenerator {} }\n\nconsole.log(result.map.toString());\n// '{ .. source map content .. }'\n\n// apply input source map\nvar SourceMapConsumer = require('source-map').SourceMapConsumer;\nvar inputSourceMap = fs.readFileSync('path/to/my.css.map', 'utf8');\n\nresult.map.applySourceMap(\n  new SourceMapConsumer(inputSourceMap),\n  'path/to/my.css'  // should be the same as passed to csso.minify()\n);\n```\n\n### Debugging\n\n```\n> echo '.test { color: green; color: #ff0000 } .foo { color: red }' | csso --debug\n## parsing done in 10 ms\n\nCompress block #1\n(0.002ms) convertToInternal\n(0.000ms) clean\n(0.001ms) compress\n(0.002ms) prepare\n(0.000ms) initialRejoinRuleset\n(0.000ms) rejoinAtrule\n(0.000ms) disjoin\n(0.000ms) buildMaps\n(0.000ms) markShorthands\n(0.000ms) processShorthand\n(0.001ms) restructBlock\n(0.000ms) rejoinRuleset\n(0.000ms) restructRuleset\n## compressing done in 9 ms\n\n.foo,.test{color:red}\n```\n\nMore details are provided when `--debug` flag has a number greater than `1`:\n\n```\n> echo '.test { color: green; color: #ff0000 } .foo { color: red }' | csso --debug 2\n## parsing done in 8 ms\n\nCompress block #1\n(0.000ms) clean\n  .test{color:green;color:#ff0000}.foo{color:red}\n\n(0.001ms) compress\n  .test{color:green;color:red}.foo{color:red}\n\n...\n\n(0.002ms) restructBlock\n  .test{color:red}.foo{color:red}\n\n(0.001ms) rejoinRuleset\n  .foo,.test{color:red}\n\n## compressing done in 13 ms\n\n.foo,.test{color:red}\n```\n\nUsing `--debug` option adds stack trace to CSS parse error output. That can help to find out problem in parser.\n\n```\n> echo '.a { color }' | csso --debug\n\nParse error <stdin>: Colon is expected\n    1 |.a { color }\n------------------^\n    2 |\n\n/usr/local/lib/node_modules/csso/lib/cli.js:243\n                throw e;\n                ^\n\nError: Colon is expected\n    at parseError (/usr/local/lib/node_modules/csso/lib/parser/index.js:54:17)\n    at eat (/usr/local/lib/node_modules/csso/lib/parser/index.js:88:5)\n    at getDeclaration (/usr/local/lib/node_modules/csso/lib/parser/index.js:394:5)\n    at getBlock (/usr/local/lib/node_modules/csso/lib/parser/index.js:380:27)\n    ...\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "csso@1.6.4",
  "_from": "csso@~1.6.4"
}
