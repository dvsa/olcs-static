{
  "name": "gray-matter",
  "description": "A simple to use and extend front matter library. Supports parsing and extracting YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.",
  "version": "0.4.2",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/assemble/gray-matter.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/gray-matter/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "front-matter",
    "front matter",
    "frontmatter",
    "yaml front matter",
    "matter",
    "parse",
    "parser",
    "yfm",
    "JSON",
    "coffee",
    "coffee-script",
    "yaml"
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "delims": "^0.1.4",
    "fs-utils": "^0.4.3",
    "js-yaml": "^3.0.2",
    "lodash": "^2.4.1",
    "verbalize": "^0.1.2"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "coffee-script": "^1.7.1",
    "cson-safe": "^0.1.1",
    "mocha": "^1.19.0",
    "toml": "^2.0.5",
    "verb": "^0.2.7"
  },
  "readme": "# gray-matter [![NPM version](https://badge.fury.io/js/gray-matter.png)](http://badge.fury.io/js/gray-matter)\n\n> A simple to use and extend front matter library. Supports parsing and extracting YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.\n\nv0.4.0 has breaking changes! `context` has been changed to `data`.\n\n* Use custom delimiters\n* Will extract and parse:\n  * [YAML](http://github.com/nodeca/js-yaml)\n  * [JSON](http://en.wikipedia.org/wiki/Json)\n  * [CoffeeScript](http://coffeescript.org)\n  * [TOML](http://github.com/mojombo/toml)\n* Easy to add additional parsers!\n\n#### TOC\n\n<!-- toc -->\n* [Install](#install)\n* [Usage](#usage)\n* [Methods](#methods)\n  * [matter](#matter)\n  * [matter.read](#matterread)\n  * [matter.exists](#matterexists)\n  * [matter.extend](#matterextend)\n  * [matter.recontruct](#matterrecontruct)\n  * [matter.stringify](#matterstringify)\n  * [matter.stringifyYAML](#matterstringifyyaml)\n* [Options](#options)\n  * [lang](#lang)\n  * [delims](#delims)\n  * [autodetect](#autodetect)\n* [Examples](#examples)\n  * [matter](#matter)\n  * [matter.extend](#matterextend)\n* [Why?](#why)\n* [Authors](#authors)\n* [License](#license)\n\n<!-- toc stop -->\n## Install\nInstall with [npm](npmjs.org)\n\n```bash\nnpm i gray-matter --save\n```\nInstall with [bower](https://github.com/bower/bower)\n\n```bash\nbower install gray-matter --save\n```\n\n## Usage\n```js\nvar matter = require('gray-matter');\nmatter(String, Object);\n```\n\n## Methods\n### matter\n\nBy default the `matter()` method expects a string. So this:\n\n```js\nmatter(str);\n```\n\nresults in something like:\n\n```json\n{\n  \"data\": {\"foo\": \"bar\"},\n  \"content\": \"baz\",\n  \"original\": \"---\\nfoo: bar\\n---\\nbaz\"\n}\n```\n\n### matter.read\n\nRead a file from the file system before parsing.\n\n```js\nmatter.read('file.md');\n```\nReturns:\n\n```json\n{\n  \"data\": {\"foo\": \"bar\"},\n  \"content\": \"baz\",\n  \"original\": \"---\\nfoo: bar\\n---\\nbaz\"\n}\n```\n\n### matter.exists\n\nReturns `true` or `false` if front matter exists:\n\n```js\nmatter.exists(str);\n```\n\n### matter.extend\n\nExtend and stringify **YAML** front matter. Takes an object as the second parameter, and returns either the extended, stringified object (YAML), or if no front matter is found an empty string is returned.\n\n```js\nmatter.extend(str, obj);\n```\n\n### matter.recontruct\n\nA convenience wrapper around the `matter` and `matter.extend`. Extends YAML front matter, then re-assembles front matter with the content of the file.\n\n```js\nmatter.recontruct(str, obj);\n```\n\n### matter.stringify\n\nA convenience wrapper around the `matter(str).data` method.\n\n```js\nmatter.stringify(str);\n```\n\n\n### matter.stringifyYAML\n\nStringify parsed front matter back to YAML.\n\n```js\nmatter.stringifyYAML(str);\n```\n\n## Options\n> All methods will accept an options object to be passed as a second parameter\n\n### lang\nType: `String`\n\nDefault: `yaml`\n\nThe parser to use on the extracted front matter. Valid options include:\n* `yaml`\n* `json`\n* `coffee` requires the [`coffee-script`](https://www.npmjs.org/package/coffee-script) package\n* `toml` requires the [`toml`](https://www.npmjs.org/package/toml) package\n\n### delims\nType: `Object`\n\nDefault: `{delims: ['---', '---']}`\n\nOpen and close delimiters can be passed in as an array of strings. Example:\n\n```js\nmatter.read('file.md', {delims: ['~~~', '~~~']});\n```\n\nYou may also pass an array of arrays, allowing multiple alternate delimiters to be used. Example:\n\n\n```js\n{\n  delims: [\n    ['---', '~~~'], ['---', '~~~']\n  ]\n}\n```\n_Note that passing multiple delimiters will yield unpredictable results, it is recommended that you use this option only for testing purposes._\n\n### autodetect\nType: `Boolean`\n\nDefault: `undefined`\n\nAttempts to automatically register a language that is specified after the first code boundary (delimiter).\n\nUsage Example:\n\n```coffee\n--- coffee\nuser = 'jonschlinkert'\nreverse = (src) ->\n  src.split('').reverse().join('')\n---\n\n[%= user %]\n[%= reverse(user) %]\n```\n\n## Examples\n### matter\n\nLet's say our page, `foo.html` contains\n\n```html\n---\ntitle: YAML Front matter\ndescription: This is a page\n---\n<h1>{{title}}</h1>\n```\n\nthen running the following in the command line:\n\n```js\nconsole.log(matter('foo.html'));\n```\nreturns\n\n```json\n{\n  \"data\": {\n    \"title\": \"YAML Front matter\",\n    \"description\": \"This is a page\"\n  },\n  \"content\": \"<h1>{{title}}</h1>\",\n  \"original\": \"---\\ntitle: YAML Front matter\\n---\\n<h1>{{title}}</h1>\"\n}\n```\nand\n\n```js\nconsole.log(matter('foo.html').data);\n```\nreturns\n\n\n```json\n{\"title\": \"YAML Front matter\", \"description\": \"This is a page\"}\n```\n\n### matter.extend\n\nGiven this page:\n\n```html\n---\ntitle: Gray Matter\n---\nHooray!\n```\nand this config:\n\n```js\nvar file = require('fs').readFileSync('file.md', 'utf8');\nvar obj = {\n  description: 'A simple to use front matter lib';\n};\nmatter.extend(file, obj);\n```\n\nthe result would be:\n\n```html\n---\ntitle: Gray Matter\ndescription: A simple to use front matter lib\n---\nHooray!\n```\n\n## Why?\n> Why another YAML Front Matter library?\n\nBecause other libraries we tried failed to meet our requirements with [Assemble](http://assemble.io). Some most of the libraries met most of the requirements, but _none had all of them_. Here are the most important:\n\n* Be usable, if not simple\n* Allow custom delimiters\n* Use a dependable and well-supported library for parsing YAML\n* Don't fail if YAML front matter exists, but no content\n* Don't fail if content exists, but no YAML front matter\n* Have no problem reading YAML files directly\n* Have no problem with complex content, including fenced code blocks containing examples of YAML front matter.\n* Should return an object that contains the parsed YAML front matter and content, as well as the \"original\" content.\n\n\n## Authors\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n**Brian Woodward**\n\n+ [github/doowb](https://github.com/doowb)\n+ [twitter/doowb](http://twitter.com/doowb)\n\n\n## License\nCopyright (c) 2014 Jon Schlinkert, Brian Woodward, contributors.\nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on May 19, 2014._",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/assemble/gray-matter/issues"
  },
  "homepage": "https://github.com/assemble/gray-matter#readme",
  "_id": "gray-matter@0.4.2",
  "_from": "gray-matter@^0.4.2"
}
